name: Deploy Astro site to Pages

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  BUILD_PATH: "."

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    # --- CAMBIO CRÍTICO #1: AÑADE ESTA LÍNEA ---
    # Esto le da al job de "build" acceso a los secrets del entorno "github-pages"
    environment: github-pages
    # -----------------------------------------
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: npm
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5
      - name: Install dependencies
        run: npm ci
        working-directory: ${{ env.BUILD_PATH }}
      
      # --- CAMBIO #2: AÑADE ESTE PASO DE DEPURACIÓN (OPCIONAL) ---
      # Este paso imprimirá las variables en el log para que veas si se leyeron.
      - name: Debug Environment Variables
        env:
          HOST_VAR: ${{ secrets.PUBLIC_N8N_HOST }}
          ID_VAR: ${{ secrets.PUBLIC_N8N_WEBHOOK_ID }}
        run: |
          echo "Host Variable: $HOST_VAR"
          echo "Webhook ID is set: ${{ env.ID_VAR != '' }}"
      # ----------------------------------------------------

      - name: Build with Astro
        env:
          PUBLIC_N8N_HOST: ${{ secrets.PUBLIC_N8N_HOST }}
          PUBLIC_N8N_WEBHOOK_ID: ${{ secrets.PUBLIC_N8N_WEBHOOK_ID }}
        run: |
          npx --no-install astro build \
            --site "${{ steps.pages.outputs.origin }}" \
            --base "${{ steps.pages.outputs.base_path }}"
        working-directory: ${{ env.BUILD_PATH }}
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ env.BUILD_PATH }}/dist

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: build
    runs-on: ubuntu-latest
    name: Deploy
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
